version: "3.8"
services:
  permissions-service:
    container_name: permissions-service
    build:
      context: .
      dockerfile: permissions-service/Dockerfile
    ports:
      - 50051:50051
    volumes:
      - ./permissions-service:/permissions-service
    env_file:
      - .env
    command: python main.py
    networks:
      - microservices
    depends_on:
      - permissions-database
    
  permissions-consumer-1:
    container_name: permissions-consumer-1
    build:
      context: .
      dockerfile: permissions-service/Dockerfile
    ports:
      - 50052:50052
    volumes:
      - ./permissions-service:/permissions-service
    env_file:
      - .env
    command: python consumer.py
    networks:
      - microservices
    depends_on:
      - permissions-service
  
  permissions-consumer-2:
    container_name: permissions-consumer-2
    build:
      context: .
      dockerfile: permissions-service/Dockerfile
    ports:
      - 50053:50053
    volumes:
      - ./permissions-service:/permissions-service
    env_file:
      - .env
    command: python consumer.py
    networks:
      - microservices
    depends_on:
      - permissions-service
  
  permissions-consumer-3:
    container_name: permissions-consumer-3
    build:
      context: .
      dockerfile: permissions-service/Dockerfile
    ports:
      - 50054:50054
    volumes:
      - ./permissions-service:/permissions-service
    env_file:
      - .env
    command: python consumer.py
    networks:
      - microservices
    depends_on:
      - permissions-service
  
  permissions-consumer-4:
    container_name: permissions-consumer-4
    build:
      context: .
      dockerfile: permissions-service/Dockerfile
    ports:
      - 50055:50055
    volumes:
      - ./permissions-service:/permissions-service
    env_file:
      - .env
    command: python consumer.py
    networks:
      - microservices
    depends_on:
      - permissions-service

  permissions-consumer-5:
    container_name: permissions-consumer-5
    build:
      context: .
      dockerfile: permissions-service/Dockerfile
    ports:
      - 50056:50056
    volumes:
      - ./permissions-service:/permissions-service
    env_file:
      - .env
    command: python consumer.py
    networks:
      - microservices
    depends_on:
      - permissions-service
  
  permissions-consumer-6:
    container_name: permissions-consumer-6
    build:
      context: .
      dockerfile: permissions-service/Dockerfile
    ports:
      - 50057:50057
    volumes:
      - ./permissions-service:/permissions-service
    env_file:
      - .env
    command: python consumer.py
    networks:
      - microservices
    depends_on:
      - permissions-service

  permissions-database:
    container_name: permissions-database
    image: postgres
    expose:
      - ${POSTGRES_PORT}
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - permissions-database:/var/lib/postgresql/data
      - ./permissions-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    hostname: ${DATABASE_HOST}
    env_file:
      - .env
    command: -p ${POSTGRES_PORT}
    networks:
      - microservices

  # insights-service:
  #   container_name: insights-service
  #   build:
  #     context: .
  #     dockerfile: insights-service/Dockerfile
  #   ports:
  #     - 5000:8000
  #   volumes:
  #     - ./insights-service:/insights-service
  #   command: uvicorn main:app --host 0.0.0.0 --reload
  #   networks:
  #     - microservices
  #   depends_on:
  #     - kong

  # channels-service:
  #   container_name: channels-service
  #   build:
  #     context: .
  #     dockerfile: channels-service/Dockerfile
  #   ports:
  #     - 8080:8080
  #   volumes:
  #     - ./channels-service:/channels-service
  #   command: ./mvnw spring-boot:run
  #   networks:
  #     - microservices
  #   depends_on:
  #     - kong

  # authentication-service:
  #   container_name: authentication-service
  #   build:
  #     context: .
  #     dockerfile: authentication-service/Dockerfile
  #   ports:
  #     - 4000:8000
  #   volumes:
  #     - ./authentication-service:/authentication-service
  #   command: uvicorn main:app --host 0.0.0.0 --reload
  #   networks:
  #     - microservices
  #   depends_on:
  #     - kong

  # kong:
  #   container_name: kong
  #   networks:
  #     - microservices
  #   image: kong/kong-gateway:2.8.0.0-alpine
  #   ports:
  #     - "8000:8000"
  #     - "8001:8001"
  #     - "8002:8002"
  #     - "8443:8443"
  #   environment:
  #     KONG_DATABASE: "off"
  #     KONG_PLUGINS: "bundled,authentication"
  #     KONG_ADMIN_ACCESS_LOG: /dev/stdout
  #     KONG_ADMIN_ERROR_LOG: /dev/stderr
  #     KONG_PROXY_LISTEN: "0.0.0.0:8000"
  #     KONG_ADMIN_LISTEN: "0.0.0.0:8001"
  #     KONG_PROXY_ACCESS_LOG: /dev/stdout
  #     KONG_PROXY_ERROR_LOG: /dev/stderr
  #     KONG_DECLARATIVE_CONFIG: "/opt/kong/declarative/kong.yml"
  #     NGINX_UPSTREAM_CONNECT_TIMEOUT: 5000
  #   volumes:
  #     - ./kong:/opt/kong/declarative/
  #     - ./kong/plugins/authentication:/usr/local/share/lua/5.1/kong/plugins/authentication

volumes:
  permissions-database:
networks:
  microservices:
    external: false